name: Build and Release

on:
  push:
    tags:
      - "*"

permissions:
  contents: write

jobs:
  build:
    name: Build Binaries
    runs-on: ubuntu-latest

    strategy:
      matrix:
        arch: [amd64, arm64]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: 'stable'
          check-latest: true

      - name: Build Binary
        run: |
          CGO_ENABLED=0 GOARCH=${{ matrix.arch }} GOOS=linux go build -ldflags "-s -w -X main.Version=${{ github.ref_name }}" -o herald_${{ matrix.arch }} ./cmd/herald

      - name: Upload Build Artifact
        uses: actions/upload-artifact@v4
        with:
          name: herald_${{ matrix.arch }}
          path: herald_${{ matrix.arch }}

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Download Build Artifacts (AMD64)
        uses: actions/download-artifact@v5
        with:
          name: herald_amd64

      - name: Download Build Artifacts (ARM64)
        uses: actions/download-artifact@v5
        with:
          name: herald_arm64

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false

      - name: Upload Release Asset (AMD64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: herald_amd64
          asset_name: herald_amd64
          asset_content_type: application/octet-stream

      - name: Upload Release Asset (ARM64)
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: herald_arm64
          asset_name: herald_arm64
          asset_content_type: application/octet-stream

  container:
    name: Build and Push Container Image
    needs: release
    runs-on: ubuntu-latest
    env:
      DISTRO: "alpine"
      DISTRO_VARIANT: "3.22"
      build_file: ./container/Containerfile
    steps:
      - name: Prepare
        id: prep
        run: |
          if [[ "${GITHUB_REF}" == refs/heads/* ]]; then
              if [[ "${GITHUB_REF}" == refs/heads/*/* ]] ; then
                  git_branch="${GITHUB_REPOSITORY/docker-/}:$(echo $GITHUB_REF | sed "s|refs/heads/||g" | sed "s|/|-|g")"
              else
                  git_branch=${GITHUB_REF#refs/heads/}
              fi

              case "${git_branch}" in
                  "main" | "master" )
                      branch_tag="${GITHUB_REPOSITORY}:latest"
                  ;;
                  "develop" )
                      branch_tag="${GITHUB_REPOSITORY}:develop"
                  ;;
              esac
          fi

          if [[ "${GITHUB_REF}" == refs/tags/* ]]; then
              git_tag="${GITHUB_REPOSITORY}:${PHP_BASE}-${DISTRO}-$(echo ${GITHUB_REF} | sed 's|refs/tags/||g')"
          fi

          if [ -n "${branch_tag}" ] && [ -n "${git_tag}" ]; then
              image_tags=${branch_tag},${git_tag}
          else
              image_tags="${branch_tag}${git_tag}"
          fi

          echo "dockerhub_repo=${GITHUB_REPOSITORY/docker-/}" >> $GITHUB_ENV
          dockerhub_images=$(echo "${image_tags}" | sed "s|${GITHUB_REPOSITORY}|docker.io/${GITHUB_REPOSITORY/docker-/}|g")
          ghcr_images=$(echo "${image_tags}" | sed "s|${GITHUB_REPOSITORY}|ghcr.io/${GITHUB_REPOSITORY}|g")
          echo "container_images=${dockerhub_images},${ghcr_images}" >> $GITHUB_OUTPUT
      - name: Label
        id: Label
        run: |
          image_name=${GITHUB_REPOSITORY/docker-/}
          if [ -f "${{ env.build_file }}" ] ; then
              sed \
                    -i \
                    -e "/FROM .*/a LABEL ${image_name}.git_repository=\"https://github.com/${GITHUB_REPOSITORY}\"" \
                    -e "/FROM .*/a LABEL ${image_name}.git_commit=\"${GITHUB_SHA}\"" \
                    -e "/FROM .*/a LABEL ${image_name}.git_committed_by=\"${GITHUB_ACTOR}\"" \
                    -e "/FROM .*/a LABEL ${image_name}.image_build_date=\"$(date +'%Y-%m-%d %H:%M:%S')\"" \
                    -e "/FROM .*/a LABEL org.opencontainers.image.source https://github.com/${GITHUB_REPOSITORY}"  \
                    ${{ env.build_file }}

              if [ -f "CHANGELOG.md" ] ; then
                  sed -i "/FROM .*/a LABEL ${image_name}.git_changelog_version=\"$(head -n1 ./CHANGELOG.md | awk '{print $2}')\"" ${{ env.build_file }}
              fi

              if [[ $GITHUB_REF == refs/tags/* ]]; then
                  sed -i "/FROM .*/a LABEL ${image_name}.git_tag=\"${GITHUB_REF#refs/tags/v}\"" ${{ env.build_file }}
              fi

              if [[ $GITHUB_REF == refs/heads/* ]]; then
                  sed -i "/FROM .*/a LABEL ${image_name}.git_branch=\"${GITHUB_REF#refs/heads/}\"" ${{ env.build_file }}
              fi
          fi

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v3

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: arm,arm64

      - name: Login to DockerHub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Login to GitHub Container Registry
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build
        if: github.event_name != 'pull_request'
        uses: docker/build-push-action@v6
        with:
          builder: ${{ steps.buildx.outputs.name }}
          context: .
          file: ./${{ env.build_file }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.prep.outputs.container_images }}
          build-args: |
             DISTRO=${{ env.DISTRO }}
             DISTRO_VARIANT=${{ env.DISTRO_VARIANT }}
