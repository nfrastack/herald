# Example Herald Configuration File
# This file demonstrates all available configuration options
# Including secret management with env:// and file:// references

general:
  log_level: info
  log_timestamps: true
  dry_run: false

inputs:
  # Docker input with label filtering
  docker_public:
    type: docker
    api_url: unix:///var/run/docker.sock
    # api_auth_user: file:///run/secrets/docker_user    # Load from file
    # api_auth_pass: env://DOCKER_PASSWORD              # Load from environment
    expose_containers: true
    process_existing: true
    record_remove_on_stop: true
    filter:
      - type: label
        conditions:
          - key: traefik.proxy.visibility
            value: public

  docker_internal:
    type: docker
    expose_containers: true
    filter:
      - type: label
        conditions:
          - key: traefik.proxy.visibility
            value: internal

  # Caddy input provider
  caddy_routes:
    type: caddy
    api_url: http://caddy:2019/config/
    # api_auth_user: env://CADDY_USER
    # api_auth_pass: file:///etc/secrets/caddy_pass
    interval: 60s
    record_remove_on_stop: true
    process_existing: true
    tls:
      verify: true
      # ca: "/etc/ssl/certs/ca-certificates.crt"
      # cert: "/etc/ssl/client/client.crt"
      # key: "/etc/ssl/client/client.key"
    filter:
      - type: host
        conditions:
          - value: "*.localhost"

  # Traefik router monitoring
  traefik_example:
    type: traefik
    api_url: "https://traefik.example.com/api/http/routers"
    # api_auth_user: env://TRAEFIK_USER
    # api_auth_pass: file:///etc/herald/traefik_pass
    interval: 30s
    record_remove_on_stop: true
    process_existing: true
    tls:
      verify: true
    filter:
      - type: name
        conditions:
          - value: ^websecure-

  # File-based DNS records
  file_example:
    type: file
    source: "./dns-records.yaml"
    format: yaml
    interval: -1  # Watch for file changes
    process_existing: true
    record_remove_on_stop: true
    filter:
      - type: hostname
        conditions:
          - value: "*.example.com"

  # Remote URL polling
  remote_example:
    type: remote
    remote_url: https://api.example.com/dns-records.json
    # remote_auth_user: env://REMOTE_USER
    # remote_auth_pass: env://REMOTE_PASS
    format: json
    interval: 60s
    process_existing: true
    record_remove_on_stop: true
    tls:
      verify: true

  # Tailscale VPN integration
  tailscale_example:
    type: tailscale
    # api_key: file:///run/secrets/tailscale_key
    # api_auth_id: env://TAILSCALE_CLIENT_ID
    # api_auth_token: env://TAILSCALE_CLIENT_SECRET
    api_key: "tskey-api-xxxxx"
    tailnet: "-"
    domain: "ts.example.com"
    interval: 120s
    hostname_format: "simple"
    process_existing: true
    record_remove_on_stop: true
    filter:
      - type: online
        conditions:
          - value: "true"

  # ZeroTier VPN integration
  zerotier_example:
    type: zerotier
    api_url: "https://my.zerotier.com"
    # api_token: env://ZEROTIER_API_TOKEN
    api_token: "your_zerotier_api_token"
    # network_id: env://ZEROTIER_NETWORK_ID
    network_id: "YOUR_NETWORK_ID"
    domain: "zt.example.com"
    interval: 60s
    online_timeout_seconds: 300
    use_address_fallback: true
    process_existing: true
    record_remove_on_stop: true
    filter:
      - type: online
        conditions:
          - value: "true"

outputs:
  # Live DNS updates
  cloudflare_dns:
    type: dns
    provider: cloudflare
    # api_token: env://CLOUDFLARE_API_TOKEN
    api_token: "your_cloudflare_api_token"
    log_level: info

  # AWS Route53 (with secret references)
  route53_dns:
    type: dns
    provider: route53
    # aws_access_key_id: file:///aws/credentials/access_key
    # aws_secret_access_key: file:///aws/credentials/secret_key
    # aws_region: env://AWS_REGION
    aws_access_key_id: "AKIAIOSFODNN7EXAMPLE"
    aws_secret_access_key: "wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY"
    aws_region: "us-east-1"

  # Remote aggregator
  remote_aggregator:
    type: remote
    url: http://aggregator.example.com/api/dns
    client_id: herald_client
    # token: file:///var/secrets/aggregator_token
    token: your_aggregator_token
    timeout: "30s"
    tls:
      verify: true

  # Local hosts file with DNS resolution control
  hosts:
    type: file
    format: hosts
    path: "./output/%domain%.hosts"
    user: herald
    group: herald
    mode: 0644
    # DNS Resolution Control Options
    flatten_cnames: true          # Enable CNAME to A record flattening (default: true)
    dns_server: "1.1.1.1"        # Use external DNS server (Cloudflare)
    resolve_external: true       # Force external DNS resolution
    # ip_override: "192.168.1.100" # Override all resolved IPs with this address

  # JSON backup files
  json_backup:
    type: file
    format: json
    path: "./output/%domain%.json"
    # path: env://BACKUP_PATH/herald-%domain%.json  # Dynamic path from environment
    user: herald
    group: herald
    mode: 0644

  # YAML export
  yaml_export:
    type: file
    format: yaml
    path: "./output/%domain%.yml"

  # Zone file
  zone_file:
    type: file
    format: zone
    path: "./output/%domain%.zone"
    user: herald
    group: herald
    mode: 0644
    soa:
      primary_ns: ns1.%domain%
      admin_email: admin@%domain%
      refresh: 3600
      retry: 900
      expire: 604800
      minimum: 300
      serial: auto
    ns_records:
      - ns1.%domain%
      - ns2.%domain%
    default_ttl: 300

domains:
  # Production domain - live DNS and backups
  example_com_public:
    name: "example.com"
    profiles:
      inputs:
        - docker_public
        - traefik_example
        - caddy_routes
      outputs:
        - cloudflare_dns
        - hosts
        - json_backup
        - zone_file
    record:
      type: A
      target: "server.example.com"  # Default target for new records
      ttl: 300
      update_existing: true
    include_subdomains:
      - api
      - www
    exclude_subdomains:
      - dev
      - staging

  # Internal domain - files only, no live DNS
  example_com_internal:
    name: "example.com"
    profiles:
      inputs:
        - docker_internal
      outputs:
        - remote_aggregator
        - yaml_export
    record:
      type: CNAME
      target: "internal.example.com"
      ttl: 120

  # VPN domain - internal resolution only
  vpn_domain:
    name: "ts.example.com"
    profiles:
      inputs:
        - tailscale_example
      outputs:
        - hosts
        - zone_file
    record:
      type: A
      ttl: 60

  # ZeroTier domain
  zerotier_domain:
    name: "zt.example.com"
    profiles:
      inputs:
        - zerotier_example
      outputs:
        - hosts
        - remote_aggregator
    record:
      type: A
      ttl: 120

  # File-based records domain
  file_based_domain:
    name: "api.example.com"
    profiles:
      inputs:
        - file_example
        - remote_example
      outputs:
        - cloudflare_dns
        - json_backup

# API server configuration (optional)
api:
  enabled: true
  port: "8080"
  listen:
    - "all"
    - "!docker*"
    - "!lo"
  endpoint: "/api/dns"
  client_expiry: "10m"
  log_level: "info"
  profiles:
    server1:
      # token: file:///var/run/secrets/server1_token
      token: "server1-secret-token"
      output_profile: "zone_file"
    server2:
      # token: env://SERVER2_API_TOKEN
      token: "server2-secret-token"
      output_profile: "json_backup"
  # tls:
  #   cert: file:///etc/ssl/herald/server.crt
  #   key: file:///etc/ssl/herald/server.key
  #   ca: "/etc/ssl/ca/client-ca.pem"

# Default record settings
defaults:
  record:
    type: A
    ttl: 300
    update_existing: true
    allow_multiple: false

# Include additional configuration files
# include:
#   - file:///etc/herald/secrets.yml
#   - "./local-overrides.yml"
